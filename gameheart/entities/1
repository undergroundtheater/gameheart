#gameheart.entities.forms

from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from gameheart.entities.models import *

class UserForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username','email']
        widgets = {'password2':forms.HiddenInput}

class UserProfileForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ['description']
        #widgets = {
        #    'user': forms.HiddenInput,
        #}

class ChapterTypeForm(forms.ModelForm):
    class Meta:
        model = ChapterType
        fields = ['name', 'description']
    sname = 'Chapter Type'
    surl = 'types/chapters/'
    sheading = 'Add New Chapter Type'
    sredirect = 'user_index'

class ChapterForm(forms.ModelForm):
    class Meta:
        model = Chapter
        fields = ['name', 'type', 'description']
    sname = 'Chapter'
    surl = 'chapters/'
    sheading = 'Add New Chapter'
    sredirect = 'user_index'

class CharacterTypeForm(forms.ModelForm):
    class Meta:
        model = CharacterType
        fields = ['name', 'description']
    sname = 'Character Type'
    surl = 'types/characters/'
    sheading = 'Add New Character Type'
    sredirect = 'user_index'

class CharacterForm(forms.ModelForm):
    class Meta:
        model = Character
        fields = ['name', 'type', 'chapter', 'description']
    def as_itable(self):
        #form = self.objects.filter(id=pkid)
        "Returns this form rendered as HTML <tr>s -- excluding the <table></table>."
        return self._html_output(
            normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>',
            error_row = '<tr><td colspan="2">%s</td></tr>',
            row_ender = '</td></tr>',
            help_text_html = '<br /><span class="helptext">%s</span>',
            errors_on_separate_row = False)
    sname = 'Character'
    surl = 'characters/'
    sheading = 'Add New Character'
    sredirect = 'user_index'

class CharacterOwnerForm(forms.ModelForm):
    class Meta:
        model = CharacterOwner
        fields = ['character', 'user']
    sname = 'Character Owner'
    surl = 'characterowners/'
    sheading = 'Assign Character to User'

class TraitTypeForm(forms.ModelForm):
    class Meta:
        model = TraitType
        fields = ['name', 'aggregate', 'description']
    sname = 'Trait Type'
    surl = 'types/traits/'
    sheading = 'Add New Trait Type'
    sredirect = 'user_index'

class TraitForm(forms.ModelForm):
    class Meta:
        model = Trait
        fields = ['name', 'type', 'level', 'xpcost', 'bpcost', 'description']
    sname = 'Trait'
    surl = 'traits/'
    sheading = 'Add New Trait'
    sredirect = 'user_index'

class CharacterTraitForm(forms.ModelForm):
    class Meta:
        model = CharacterTrait
        fields = ['character', 'trait']
        widgets = {
            'character': forms.HiddenInput,
        }
    sname = 'Character Trait'
    surl = 'characters/traits/'
    sheading = 'Add New Trait to Character'
    sredirect = 'user_index'

class EventForm(forms.ModelForm):
    class Meta:
        model = Event
        fields = ['chapter', 'chapteraddress', 'dateheld']
        widgets = {
            'chapter': forms.HiddenInput,
        }
    sname = 'Event'
    surl = '/events/'
    sheading = 'Add New Event to Chapter'
