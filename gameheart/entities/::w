#gameheart.entities.models

from datetime import datetime
from django.db import models
from django.db.models import Q
from django.db import DEFAULT_DB_ALIAS
from django.contrib.auth.models import User

class GHModel(models.Model):
    class Meta:
        abstract = True
    dateactive = models.DateTimeField( blank=True, null=True, default=None )
    dateexpiry = models.DateTimeField( blank=True, null=True, default=None )
    datecreated = models.DateTimeField( auto_now_add=True )
    datemodified = models.DateTimeField( auto_now=True )
    modifiedby = models.ForeignKey( User, null=True, related_name='+' )
    modifiedbyip = models.CharField( max_length=200, null=True )

class GHManager(models.Manager):
    def activeonly(self,date=None):
        model = self.model
        if date == None:
            date = datetime.now()
        return self.filter(Q(dateactive=None)|Q(dateactive__lte=date)).filter(Q(dateexpiry=None)|Q(dateexpiry__gte=date))
    def seek(self, seekval):
        model = self.filter(name__icontains=seekval)
        return model

class UserProfile(GHModel):
    user = models.ForeignKey(User, unique=True, related_name='connect')
    name = models.CharField( max_length=200 )
    description = models.TextField( blank=True )
    isadmin = models.BooleanField( default=False )
    subscriptionlevel = models.IntegerField( default=0 )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class ChapterType(GHModel):
    name = models.CharField( max_length=200 )
    description = models.TextField( blank=True )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class Chapter(GHModel):
    name = models.CharField( max_length=200 )
    type = models.ForeignKey( ChapterType, related_name='chapter_type', null=True )
    description = models.TextField( blank=True )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class ChapterAddress(GHModel):
    name = models.CharField( max_length=200 )
    chapter = models.ForeignKey( Chapter, related_name='address_chapter') 
    address1 = models.CharField( max_length=200, null=True )
    address2 = models.CharField( max_length=200, null=True )
    city = models.CharField( max_length=200, null=True )
    state = models.CharField( max_length=200, null=True )
    zip = models.CharField( max_length=200, null=True )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class StaffType(GHModel):
    name = models.CharField( max_length=200 )
    approver = models.BooleanField()
    description = models.TextField( blank=True )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class StaffManager(GHManager):
    def linkedonly(self,chapter):
        model = self.activeonly().filter(chapter=chapter)
        return model
    def approver(self):
        approvers = StaffType.objects.activeonly().filter(approver=True)
        model = self.activeonly().filter(type__in=approvers)
        return model

class Staff(GHModel):
    chapter = models.ForeignKey( Chapter, related_name='+' )
    user = models.ForeignKey( User, related_name='+' )
    type = models.ForeignKey( StaffType, related_name='+' )
    objects = StaffManager()

class Event(GHModel):
    chapter = models.ForeignKey( Chapter, related_name='event_chapter' )
    chapteraddress = models.ForeignKey( ChapterAddress, related_name='+' )
    dateheld = models.DateTimeField( null=True )
    objects = GHManager()

class CharacterType(GHModel):
    name = models.CharField( max_length=200 )
    description = models.TextField( blank=True )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class CharacterManager(GHManager):
    def ownedonly(self,user):
        owned = CharacterOwner.objects.activeonly().filter(user=user)
        model = self.filter(pk__in=owned)
        return model
    def playableonly(self,user):
        ownedonly = self.ownedonly(user)
        model = ownedonly.filter(isdeceased=0).filter(isshelved=0)
        return model
    def favoritesonly(self,character):
        favorites = FavoriteCharacter.filter(character=character)
        model = self.filter(pk__in=favorites.favoritecharacter)
        return model
    def primaryexists(self,user,model):
        chapter = model.chapter
        chaptertype = ChapterType.objects.get(pk=chapter.id)
        chapters = Chapter.objects.filter(type=chaptertype)
        pcharacters = self.playableonly(user).filter(isprimary=1).filter(chapter__in=chapters)
        if pcharacters:
            return True
        else:
            return False

class Character(GHModel):
    name = models.CharField( max_length=200 )
    type = models.ForeignKey( CharacterType, related_name='character_type' )
    chapter = models.ForeignKey( Chapter, related_name='Character_chapter' )
    isprimary = models.BooleanField()
    isdeceased = models.BooleanField()
    isshelved = models.BooleanField()
    description = models.TextField( blank=True )
    objects = CharacterManager()
    def __unicode__(self):
        return self.name

class CharacterOwnerManager(GHManager):
    def linkedonly(self,character):
        model = self.activeonly().filter(character=character)
        return model

class CharacterOwner(GHModel):
    character = models.ForeignKey( Character )
    user = models.ForeignKey( User, related_name='character_owner' )
    objects = CharacterOwnerManager()
    def __unicode__(self):
        return self.character

class Attendance(GHModel):
    event = models.ForeignKey( Event, related_name='attended_event', null=True )
    user = models.ForeignKey( User, related_name='attendee' )
    character = models.ForeignKey( Character, related_name='attended_character' )
    xpawarded = models.IntegerField( null=True )
    hidden = models.BooleanField()
    authorizedby = models.ForeignKey( User, related_name='attended_authuser' )
    objects = GHManager()

class TraitManager(GHManager):
    def charactertypeonly(self,charactertype):
        model = self.objects.filter(charactertype__in=charactertype)
        return model
    def chaptertypeonly(self,chaptertype):
        model = self.objects.filter(chaptertype__in=chaptertype)
        return model

class TraitType(GHModel):
    name = models.CharField( max_length=200 )
    aggregate = models.BooleanField()
    onepercharacter = models.BooleanField()
    description = models.TextField( blank=True )
    charactertypes = models.ManyToManyField( CharacterType, blank=True )
    chaptertypes = models.ManyToManyField( ChapterType, blank=True )
    objects = TraitManager()
    def __unicode__(self):
        return self.name

class Trait(GHModel):
    name = models.CharField( max_length=200 )
    type = models.ForeignKey( TraitType, related_name='trait_type' )
    level = models.IntegerField( default=1 )
    xpcost = models.IntegerField( default=0 )
    bpcost = models.IntegerField( default=0 )
    description = models.TextField( blank=True )
    charactertypes = models.ManyToManyField( CharacterType, blank=True )
    chaptertypes = models.ManyToManyField( ChapterType, blank=True )
    objects = TraitManager()
    def __unicode__(self):
        return self.name

class CharacterTrait(GHModel):
    character = models.ForeignKey( Character, related_name='character_trait_character' )
    trait = models.ForeignKey( Trait, related_name='character_trait_trait' )
    authorizedby = models.ForeignKey( User, null=True, default=None, related_name='character_trait_auth_user' )
    #dateauthorized = models.DateTimeField( blank=True, null=True, default=None )
    objects = GHManager()
    def __unicode__(self):
        return str(self.trait)

class Discount(GHModel):
    authorizedby = models.ForeignKey( User, related_name='discount_authuser' )
    charactertrait = models.ForeignKey( CharacterTrait, related_name='discount_character_trait' )
    reason = models.TextField( blank=True )
    xpdiscount = models.IntegerField( default=0 )
    bpdiscount = models.IntegerField( default=0 )
    objects = GHManager()
    def __unicode__(self):
        return str(self.authorizedby) + '_' + str(self.charactertrait)

class Authorization(GHModel):
    issuer = models.ForeignKey( User, related_name='auth_issuer' )
    charactertrait = models.ForeignKey( CharacterTrait, related_name='auth_character_trait' )
    reason = models.TextField( blank=True )
    authorizinguser = models.ForeignKey( User, related_name='auth_user' )
    authorized = models.BooleanField( default=0 )
    dateauthorized = models.DateTimeField()
    objects = GHManager()

class Note(GHModel):
    author = models.ForeignKey( User, related_name='note_author' )
    subject = models.CharField( max_length=200 )
    body = models.TextField( blank=True )
    objects = GHManager()
    def __unicode__(self):
        return str(self.subject)

class NoteTag(GHModel):
    note = models.ForeignKey( Note )
    tag = models.CharField( max_length=100 )
    objects = GHManager()

class NoteOwner(GHModel):
    note = models.ForeignKey( Note, related_name='note_owner_note')
    user = models.ForeignKey( User, related_name='note_owner', null=True )
    character = models.ForeignKey( Character, related_name='note_owner_character', null=True )
    chapter = models.ForeignKey( Chapter, related_name='note_owner_chapter', null=True )
    trait = models.ForeignKey( Trait, related_name='note_owner_trait', null=True )
    traitlevel = models.IntegerField( null=True )
    stafftype = models.ForeignKey( StaffType, related_name='note_owner_staff_type', null=True )
    objects = GHManager()

class Vocabulary(GHModel):
    name = models.CharField( max_length=200, unique=True )
    displayname = models.CharField( max_length=200 )
    displayplural = models.CharField( max_length=200, blank=True )
    objects = GHManager()
    def __unicode__(self):
        return self.name

class FavoriteUser(GHModel):
    user = models.ForeignKey( User, related_name='favoring_user+' )
    favoriteuser = models.ForeignKey( User, related_name='favorite_user+')

class FavoriteChapter(GHModel):
    user = models.ForeignKey( User, related_name='favoring_user+' )
    favoritechapter = models.ForeignKey( Chapter, related_name='favorite_chapter+' )

class FavoriteCharacter(GHModel):
    user = models.ForeignKey( User, related_name='favoring_user+' )
    favoritecharacter = models.ForeignKey( Character, related_name='favorite_character+' )


def install():
    # Create objects here using Django ORM
    model = User.objects.get(username='jjneylon')
    if not model:
        model = User.objects.db_manager(DEFAULT_DB_ALIAS).create_superuser('jjneylon','jjneylon@gmail.com','Smapdee0')
    # Users
    UserProfile(user=model, isadmin=1).save()
    model = User.objects.create_user('miles', 'justmike2000@gmail.com', 'miles')
    UserProfile(user=model, isadmin=1).save()
    model = User.objects.create_user('mere', 'miagardener@gmail.com', 'mere')
    UserProfile(user=model, isadmin=1).save()
    model = User.objects.create_user('BobSpircoff', 'BobSpircoff@gmail.com', 'BobSpircoff')
    UserProfile(user=model, isadmin=1).save()
    model = User.objects.create_user('internofdoom', 'internofdoom@gmail.com', 'internofdoom')
    UserProfile(user=model, isadmin=1).save()
    model = User.objects.create_user('Hollywood', 'mftomasek@gmail.com', 'Hollywood')
    UserProfile(user=model, isadmin=1).save()
    model = User.objects.create_user('Walker27067', 'walker27067@gmail.com', 'Walker27067')
    UserProfile(user=model, isadmin=1).save()
    # Vocabulary
    Vocabulary(name='User', displayname='Patron', displayplural='Patrons').save()
    Vocabulary(name='ChapterType', displayname='Setting', displayplural='Settings').save()
    Vocabulary(name='Chapter', displayname='Troupe', displayplural='Troupes').save()
    Vocabulary(name='ChapterAddress', displayname='Site', displayplural='Sites').save()
    Vocabulary(name='StaffType', displayname='Staff Type', displayplural='Staff Types').save()
    Vocabulary(name='Staff', displayname='Staff', displayplural='Staff').save()
    Vocabulary(name='Event', displayname='Game', displayplural='Games').save()
    Vocabulary(name='CharacterType', displayname='Character Type', displayplural='Character Types').save()
    Vocabulary(name='Character', displayname='Character', displayplural='Characters').save()
    Vocabulary(name='TraitType', displayname='Trait Type', displayplural='Trait Types').save()
    Vocabulary(name='Trait', displayname='Trait', displayplural='Traits').save()
    Vocabulary(name='Note', displayname='Note', displayplural='Notes').save()
    Vocabulary(name='Favorite', displayname='Favorite', displayplural='Favorites').save()
    # Chapters(Settings)
    model = ChapterType(name='Camarilla',description='Also includes Anarch games.')
    model.save()
    Chapter(type=model, name='Test Cam Site').save()
    model = ChapterType(name='Sabbat')
    model.save()
    Chapter(type=model, name='Test Sabbat Site').save()
    # Character Types
    CharacterType(name='Vampire').save()
    # Staff Types
    StaffType(name='LST').save()
    StaffType(name='ST').save()
    StaffType(name='Narrator').save()
    StaffType(name='Admin').save()
    # Traits
    model = TraitType(name='Archetype')
    model.save()
    Trait(type=model, name='Bravo', level=0).save()
    Trait(type=model, name='Architect', level=0).save()
    model = TraitType(name='Clan')
    model.save()
    Trait(type=model, name='Ventrue', level=0).save()
    Trait(type=model, name='Giovanni', level=0).save()
    model = TraitType(name='Temper', aggregate=1)
    model.save()
    Trait(type=model, name='Blood', level=1).save()
    Trait(type=model, name='Willpower', level=1).save()
    Trait(type=model, name='Morality', level=1).save()
    model = TraitType(name='Attribute', aggregate=1)
    model.save()
    Trait(type=model, name='Physical', level=0).save()
    Trait(type=model, name='Mental', level=0).save()
    Trait(type=model, name='Social', level=0).save()
    model = TraitType(name='Emphasis')
    model.save()
    Trait(type=model, name='Strength', level=0).save()
    Trait(type=model, name='Dexterity', level=0).save()
    Trait(type=model, name='Stamina', level=0).save()
    Trait(type=model, name='Charisma', level=0).save()
    Trait(type=model, name='Manipulation', level=0).save()
    Trait(type=model, name='Appearance', level=0).save()
    Trait(type=model, name='Perception', level=0).save()
    Trait(type=model, name='Intelligence', level=0).save()
    Trait(type=model, name='Wits', level=0).save()
    model = TraitType(name='Skill', aggregate=1)
    model.save()
    Trait(type=model, name='Academics', level=0).save()
    Trait(type=model, name='Animal Ken', level=0).save()
    Trait(type=model, name='Athletics', level=0).save()
    model = TraitType(name='Background', aggregate=1)
    model.save()
    Trait(type=model, name='Generation', level=1).save()
    Trait(type=model, name='Contacts', level=1).save()
    Trait(type=model, name='Allies', level=1).save()
    model = TraitType(name='Discipline', aggregate=1)
    model.save()
    Trait(type=model, name='Potence', level=0).save()
    Trait(type=model, name='Dominate', level=0).save()
    Trait(type=model, name='Necromancy', level=0).save()
    model = TraitType(name='Merit')
    model.save()
    Trait(type=model, name='Common Sense', level=4).save()
    Trait(type=model, name='Danger Sense', level=2).save()
    model = TraitType(name='Flaw')
    model.save()
    Trait(type=model, name='Derrangement', level=3).save()
    Trait(type=model, name='Conspicuous Consumption', level=4).save()
    model = TraitType(name='Status')
    model.save()
    Trait(type=model, name='Acknowledged', level=4).save()
    Trait(type=model, name='Respected', level=4).save()
    Trait(type=model, name='Knowledgeable', level=4).save()
    # Test Characters
    numlist = [1,2,3,4,5]
    chartype = CharacterType.objects.get(name='Vampire')
    chapter = Chapter.objects.get(name='Test Cam Site')
    for u in numlist:
        user = User.objects.get(pk=u)
        for c in numlist:
            if c == 1:
                isprimary=1
            else:
                isprimary=0
            name = ''.join([user.username,'\'s Test Character ',str(c)])
            model = Character(type=chartype,chapter=chapter,name=name,isprimary=isprimary)
            model.save()
            CharacterOwner(user=user,character=model).save()
    
