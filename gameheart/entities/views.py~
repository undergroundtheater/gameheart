#gameheart.entities.views

import re
from django.db.models import Q
from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.shortcuts import render, render_to_response, redirect
from django.core.context_processors import csrf
from django.forms.formsets import formset_factory
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
from paypal.standard.forms import PayPalPaymentsForm
from gameheart.entities.models import *
from gameheart.entities.forms import *
from gameheart.entities.validations import *
from gameheart.entities.helpers import *

def test(request):
    return HttpResponse('Hello World!')

def UserLoginView(request):
    try:
        red = request.GET['next']
        if request.user.is_authenticated():
            return redirect(red)
    except:
        red = '/portal/'
    if request.method == 'POST':
        user = authenticate(username=request.POST['username'], password=request.POST['password'])
        if user and request.POST['terms'] == 'true':
            if user.is_active:
                login(request, user)
                #user.save(commit=False)
                user.acceptedterms = True
                user.save()
        elif user and request.POST['terms'] == 'false':
            #user.save(commit=False)
            user.acceptedterms = False
            user.save()
        if red:
            return redirect(red)
    form = UserLoginForm()
    context = {'form':form,'title':'Login'}
    context.update(csrf(request))
    template = 'entities/userlogin.html'
    return render_to_response(template, context)

def UserCreateView(request):
    if request.method == 'POST':
        form1 = UserForm(request.POST)
        form2 = UserProfileForm(request.POST)
        if form1.is_valid():
            model_instance1 = form1.save()
            model_instance1.save()
        if form2.is_valid():
            model_instance2 = form2.save(commit=False)
            model_instance2.user = model_instance1
            model_instance2.save()
            return HttpResponseRedirect('/login/')
    else:
        form1 = UserForm()
        form2 = UserProfileForm()
    context = {
        'form1':form1
        , 'form2':form2
        , 'title':'Register'
    }
    context.update(csrf(request))
    template = 'entities/userregistration.html'
    return render_to_response(template, context)

def UserLogoutView(request):
    logout(request)
    return redirect('/login/')

@login_required
def Portal(request):
    user = request.user
    userinfo = getuserinfo(user)
    vocab = collectvocab()
    tiles = {
        'Underground Theater':{'isadmin':False,'isst':False,'titles':{
            '':[
                {'name':''.join(['My ',vocab['Characters']]), 'double':1, 'link':'/characters/index'},
                {'name':''.join(['New ',vocab['Character']]), 'double':1, 'link':'/characters/new/'},
                {'name':vocab['Favorites'], 'double':vocab['Favorites'].find(' '), 'link':'/account/favorites/index/'},
                #{'name':vocabulary['Polls'], 'double':vocabulary['Polls'].find(' '), 'link':'/portal/'},
            ]
            }},
        'Admin':{'isadmin':True,'isst':False,'titles':{
            'Management':[
                {'name':vocab['Users'], 'double':vocab['Users'].find(' '), 'link':'/users/index'},
                {'name':vocab['Chapters'], 'double':vocab['Chapters'].find(' '), 'link':'/chapters/index'},
                {'name':vocab['ChapterAddresss'], 'double':vocab['ChapterAddresss'].find(' '), 'link':'/chapters/addresses/index/'},
                {'name':vocab['Traits'], 'double':vocab['Traits'].find(' '), 'link':'/traits/index/'},
                {'name':vocab['Subscriptions'], 'double':vocab['Subscriptions'].find(' '), 'link':'/subscriptions/index/'},
            ],
            'Settings':[
                {'name':'Vocabulary', 'double':-1, 'link':'/vocabulary/index/'},
            ],
            'Types':[
                {'name':vocab['ChapterTypes'], 'double':vocab['ChapterTypes'].find(' '), 'link':'/types/chapters/index'},
                {'name':vocab['CharacterTypes'], 'double':vocab['CharacterTypes'].find(' '), 'link':'/types/characters/index'},
                {'name':vocab['TraitTypes'], 'double':vocab['TraitTypes'].find(' '), 'link':'/types/traits/index'},
                {'name':vocab['StaffTypes'], 'double':vocab['StaffTypes'].find(' '), 'link':'/types/staff/index'},
            ]
            }},
        'Storyteller':{'isadmin':False,'isst':True,'titles':{
            '':[
                {'name':vocab['Chapters'], 'double':vocab['Chapters'].find(' '), 'link':'/chapters/index/', 'isdirector':True},
                {'name':'Sheets', 'double':-1, 'link':'/chapters/sheets/'},
                {'name':vocab['ChapterAddresss'], 'double':vocab['ChapterAddresss'].find(' '), 'link':'/chapters/addresses/index/', 'isdirector':True}]
            }}
    }
    context = {'tiles':tiles
        , 'vocab':vocab
        , 'title':'Portal'
        , 'user':user
        , 'userinfo':userinfo
    }
    template = 'entities/portal.html'
    return render_to_response(template, context)

@login_required
def UserFavoriteView(request):
    user = request.user
    userinfo = getuserinfo(user)
    vocabulary_list = Vocabulary.objects.all()
    vocabulary = {}
    for object in vocabulary_list:
        vocabulary[object.name]=object.displayname
        pname = ''.join([object.name,'s'])
        vocabulary[pname] = object.displayplural
    tiles = {
        vocabulary['Favorites']:{'isadmin':False,'isst':False,'titles':{
            '':[
                {'name':''.join([vocabulary['Favorite'],' ',vocabulary['Users']]), 'double':1, 'link':'/account/favorites/users/index/'},
                {'name':''.join([vocabulary['Favorite'],' ',vocabulary['Characters']]), 'double':1, 'link':'/account/favorites/characters/index/'},
                {'name':''.join([vocabulary['Favorite'],' ',vocabulary['Chapters']]), 'double':1, 'link':'/account/favorites/chapters/index/'}]
            }}
    }
    context = {'user':user
        , 'tiles':tiles
        , 'vocabulary':vocabulary
        , 'userinfo':userinfo
        , 'title':vocabulary['Favorites']
    }
    template = 'entities/portal.html' 
    return render_to_response(template, context)

@login_required
def UserIndexView(request, nform):
    user = request.user
    userinfo = getuserinfo(user)
    if userinfo['isadmin'] == False: 
        return HttpResponseRedirect('/portal/')
    form = nform
    latest_index = form.Meta.model.objects.all()
    context = {'latest_index': latest_index
        , 'form': form
        , 'user':user
        , 'userinfo':userinfo
        , 'title':Vocabulary.objects.get(name='User').displayplural
    } 
    template = 'entities/userindexview.html'
    return render(request, template, context)

@login_required
def UserResetView(request, pkid):
    user = request.user
    userinfo = getuserinfo(user)
    profile = UserProfile.objects.get(pk=user.id)
    success = 0
    if userinfo['isadmin'] == False: 
        return HttpResponseRedirect('/portal/')
    else:
        pass1 = user.username
        auser = User.objects.get(pk=pkid)
        auser.set_password(pass1)
        auser.save()
        success = 1
    template = 'entities/userresetview.html'
    context = {'success':success
        ,'auser':auser
        ,'user':user
        ,'userinfo':userinfo
        ,'pkid':pkid
        ,'title':'Reset Password'}
    return render_to_response(template, context)
        
@login_required
def UserPasswordView(request):
    user = request.user
    userinfo = getuserinfo(user)
    emessage = ''
    if request.method == 'POST':
        pass0 = request.POST['pass0']
        pass1 = request.POST['pass1']
        pass2 = request.POST['pass2']
        auser = authenticate(username=user.username, password=pass0)
        if auser:
            if pass1 == pass2:
                auser.set_password(pass1)
                auser.save()
                return redirect('/portal/')
            else:
                emessage = 'Passwords do not match'
        else:
            emessage = 'Old Password is incorrect.'
    context = {'emessage':emessage
        ,'user':user
        ,'userinfo':userinfo
        ,'title':'Reset Password'
    }
    context.update(csrf(request))
    template = 'entities/userpasswordview.html'
    return render(request, template, context)

@login_required
def UserAccountView(request):
    user = request.user
    userinfo = getuserinfo(user)
    action = '/account/detail/'
    model1 = User.objects.get(pk=user.id)
    model2 = UserProfile.objects.get(user=model1)
    if request.method == 'POST':
        form1 = UserAccountForm(request.POST, instance=model1)
        form2 = UserProfileForm(request.POST, instance=model2)
        if form1.is_valid():
            model_instance1 = form1.save()
            model_instance1.save()
        if form2.is_valid():
            model_instance2 = form2.save()
            model_instance2.save()
            return HttpResponseRedirect('/portal/')
    else:
        form1 = UserAccountForm(instance=model1)
        form2 = UserProfileForm(instance=model2)
    context = {'form1':form1
        , 'form2':form2
        , 'action':action
        , 'user':user
        , 'userinfo':userinfo
        , 'title':''.join([userinfo['name'],' Details'])
    }
    context.update(csrf(request))
    template = 'entities/useraccountview.html'
    return render(request, template, context)

@login_required
def AccountUpgradeView(request, nitem):
    user = request.user
    userinfo = getuserinfo(user)
    if nitem=='treetoptest1234':
        template = 'entities/accountupgradetest.html'
    elif nitem=='preorder':
        template = 'entities/accountupgradepreorder.html'
    elif nitem=='yearly':
        template = 'entities/accountupgradeyearly.html'
    else:
        return HttpResponseRedirect('/account/upgrade/')
    chars = '123456789abcdefijklmnopqrstuvwxyzABCDEFIJKLMNOPQRSTUVWXYZ'
    rand4 = User.objects.make_random_password(length=4, allowed_chars=chars)
    rand24 = User.objects.make_random_password(length=24, allowed_chars=chars)
    rand3 = User.objects.make_random_password(length=3, allowed_chars=chars)
    newtxnid = ''.join([rand4,'g',rand24,'h',str(user.id),'g',rand3])
    if Transaction.objects.filter(txnid=newtxnid):
        return HttpResponseRedirect(''.join(['/account/upgrade/',nitem,'/']))
    model = TransactionForm().save(commit = False)
    model.user = user
    model.txnid = newtxnid
    model.amount = 0
    model.save()
    context = {'user':user
        ,'txnid':newtxnid
        ,'userinfo':userinfo
        ,'title':'Donate'
    }
    return render_to_response(template,context)

@csrf_exempt
@login_required
def AccountUpgradeSuccessView(request):
    user = request.user
    userinfo = getuserinfo(user)
    existing = Subscription.objects.filter(user=user).filter(pp_txn_id=request.GET['txn_id'])
    if not existing:
        subscription = SubscriptionForm().save(commit=False)
        subscription.name = ''.join([userinfo['name'],' ',str(datetime.now())])
        subscription.user = user
        subscription.pp_txn_id = request.GET['txn_id']
        subscription.pp_txn_type = request.GET['txn_type']
        subscription.pp_subscr_date = request.GET['payment_date']
        subscription.pp_mc_amount3 = request.GET['mc_gross']
        subscription.pp_mc_currency = request.GET['mc_currency']
        subscription.pp_payer_email = request.GET['payer_email']
        subscription.pp_residence_country = request.GET['residence_country']
        subscription.pp_item_number	= request.GET['item_number']
        subscription.pp_charset = request.GET['charset']
        subscription.pp_business = request.GET['business']
        subscription.pp_payer_id = request.GET['payer_id']
        subscription.pp_payer_status = request.GET['payer_status']
        subscription.pp_receiver_email = request.GET['receiver_email']
        subscription.pp_auth = request.GET['auth']
        subscription.pp_item_name = request.GET['item_name']
        subscription.pp_first_name = request.GET['first_name']
        subscription.pp_last_name = request.GET['last_name']
        subscription.notes = request.GET
        subscription.dateactive = datetime.now()
        subscription.dateexpiry = getsubscriptionenddate(user)
        subscription.save()
    template = 'entities/accountsuccessview.html'
    context = {'success':True
        ,'user':user
        ,'userinfo':userinfo
    }
    return render_to_response(template,context)

@login_required
def AccountUpgradeThankYou(request):
    user = request.user
    userinfo = getuserinfo(user)
    template = 'entities/accountfinishview.html'
    context = {'success':True
        ,'user':user
        ,'userinfo':userinfo
        ,'title':'Thamk You!'
    }
    return render_to_response(template,context)

@login_required
def AccountUpgradeCancelView(request,nparams):
    user = request.user
    userinfo = getuserinfo(user)
    template = 'entities/accountfinishview.html'
    context = {'success':False
        ,'nparams':nparams
        ,'user':user
        ,'userinfo':userinfo
        ,'title':'Cancelled'
    }
    return render_to_response(template,context)

@login_required
def UserDetailView(request,pkid):
    user = request.user
    userinfo = getuserinfo(user)
    if userinfo['isadmin'] == False: 
        return HttpResponseRedirect('/portal/')
    action = ''.join(['/users/detail/',str(pkid),'/'])
    model1 = User.objects.get(pk=pkid)
    model1_userinfo = getuserinfo(model1)
    model2 = UserProfile.objects.get(user=model1)
    if request.method == 'POST':
        form1 = UserAccountForm(data=request.POST, instance=model1)
        form2 = UserDetailProfileForm(data=request.POST, instance=model2)
        if form1.is_valid():
            model_instance1 = form1.save()
            model_instance1.save()
        if form2.is_valid():
            model_instance2 = form2.save()
            model_instance2.save()
            return HttpResponseRedirect('/portal/')
    else:
        form1 = UserAccountForm(instance=model1)
        form2 = UserDetailProfileForm(instance=model2)
    context = {'form1':form1
        , 'form2':form2
        , 'action':action
        , 'pkid':pkid
        , 'user':user
        , 'userinfo':userinfo
        , 'model1_userinfo':model1_userinfo
        , 'title':''.join([model1_userinfo['name'],' Details'])
    }
    context.update(csrf(request))
    template = 'entities/userdetailview.html'
    return render_to_response(template,context)

@login_required
def FlexFormIndexView(request, nform):
    user = request.user
    userinfo = getuserinfo(user)
    form = nform
    if not nform.Meta.model.__name__ == 'Chapter':
        if nform.isadmin == True and userinfo['isadmin'] == False:
            return HttpResponseRedirect('/portal/')
    displayname = Vocabulary.objects.activeonly().filter(name=form.Meta.model.__name__)[0].displayplural
    model = form.Meta.model
    latest_index = userviewindex(model,user)
    tilelist = []
    i=1
    for object in latest_index:
        if i>5:
             i=1
        tilelist.append({'name':str(object.name.replace("'","")), 'double':object.name.find(' '), 'link':''.join([form.surl,str(object.id),'/']),'left':i*20})
        i = i+1
    tiles = {displayname:{'isadmin':False,'isst':False,'titles':{'':tilelist}}}
    context = {'latest_index': latest_index
        , 'form': form
        , 'user':user
        , 'userinfo':userinfo
        , 'tiles':tiles
        , 'title':Vocabulary.objects.get(name=form.Meta.model.__name__).displayplural
    }
    template = 'entities/flexindexview.html'
    return render(request, template, context)

@login_required
def FlexFormCreateView(request, nform):
    user = request.user
    userinfo = getuserinfo(user)
    if nform.isadmin == True and userinfo['isadmin'] == False:
        return HttpResponseRedirect('/portal/')
    if request.method == 'POST':
        form = nform(data=request.POST)
        if form.is_valid():
            model_instance = form.save()
            model_instance.save()
            red = ''.join([nform.surl,'index/'])
            return HttpResponseRedirect(red)
    else:
        form = nform(user=user)
    form = userviewform(nform,user)
    action = ''.join([nform.surl,'new/'])
    context = {'form': form
        , 'user':user
        , 'userinfo':userinfo
        , 'action':action
        , 'title':''.join(['New ',Vocabulary.objects.get(name=form.Meta.model.__name__).displayname])
    }
    template = 'entities/flexcreateview.html'
    return render(request, template, context)

@login_required
def FlexFormDetailViewLinked(request, nform, ntemplate, pkid):
    user = request.user
    userinfo = getuserinfo(user)
    if not nform.Meta.model.__name__ == 'Chapter':
        if nform.isadmin == True and userinfo['isadmin'] == False:
            return HttpResponseRedirect('/portal/')
    lform = nform.lform
    lfield = lform.lfield
    model = nform.Meta.model.objects.get(pk=pkid)
    if nform.mname == 'Character':
        modelinfo = getcharinfo(model)
    else:
        modelinfo = {}
    action = ''.join([nform.surl, str(pkid),'/'])
    if request.method == 'POST':
       # return HTTPResponse(request.POST)
        seekval = request.POST.get('seekval')
        for value in request.POST:
            if 'del_' in value:
                pkid = int(value.replace('del_',''))
                removemodel(lform.Meta.model,pkid)
        form1 = nform(user=user, instance=model, data=request.POST, prefix='form1')
        form2 = lform(user=user, data=request.POST, prefix='form2')
        if form1.is_valid():
            model_instance1 = form1.save()
            model_instance1.save()
        if form2.is_valid():
            model_instance2 = form2.save(commit=False)
            #model_instance2.dateexpiry = getdatetime(date,time)
            setattr(model_instance2,lfield,model_instance1)
            model_instance2.save()
            return HttpResponseRedirect(action)
    else:
        seekval = ''
        form1 = nform(user=user, instance=model, prefix='form1')
        form2 = lform(user=user, initial={lform.lfield:pkid}, prefix='form2')
    linked = lform.Meta.model.objects.linkedonly(model)
    linked_list = []
    for object in linked:
        object_list = {}
        for field in lform.Meta.fields:
            object_list[field] = getattr(object,field)
        object_list['id'] = object.id
        linked_list.append(object_list)
    if seekval:
        select_list = UserProfile.objects.seek(seekval)
    else:
        favoriteslist = FavoriteUser.objects.activeonly().filter(user=user)
        select_list = User.objects.filter(pk__in=favoriteslist.values('favoriteuser'))
    form2.fields['user'].queryset = select_list 
    template = 'entities/flexdetailviewlinked.html'
    context = {'form1':form1
        , 'form2':form2
        , 'form2_fieldlist':lform.Meta.fields
        , 'modelinfo':modelinfo
        , 'linked_list':linked_list
        , 'action':action
        , 'buttons':form1.buttons
        , 'seekval': seekval
        , 'pkid':pkid
        , 'user':user
        , 'userinfo':userinfo
        , 'title':''.join([form1.instance.name,' Details'])
    }
    return render(request, template, context)

@login_required
def FlexFormDetailView(request, nform, pkid):
    user = request.user
    userinfo = getuserinfo(user)
    firstowner = getfirstowner(nform, pkid)
    if nform.isadmin == True and userinfo['isadmin'] == False:
        return HttpResponseRedirect('/portal/')
    model = nform.Meta.model.objects.get(pk=pkid)
    if request.method == 'POST':
        form = nform(user=user, data=request.POST, instance=model)
        if form.is_valid():
            model_instance = form.save()
            model_instance.save()
            return HttpResponseRedirect('../index')
    else:
        form = nform(user=user, instance=model)
    context = {'form':form
        , 'pkid':pkid
        , 'user':user
        , 'userinfo':userinfo
        , 'firstowner':firstowner
        , 'title':''.join([form.mname,' Details'])
    }
    template = 'entities/flexdetailview.html'
    return render(request, template, context)

@login_required
def FavoriteIndexView(request,nform):
    user = request.user
    userinfo = getuserinfo(user)
    action = ''.join([nform.surl,'index/'])
    if request.method == 'POST':
        seekval = request.POST.get('seekval')
        form = nform(user=user,data=request.POST,prefix='favorite')
        if form.is_valid():
            model_instance = form.save(commit=False)
            curlist = form.Meta.model.objects.filter(pk=model_instance.id)
            if curlist:
                return HttpResponseRedirect(action)
            model_instance.user = user
            model_instance.save()
            return HttpResponseRedirect(action)
    else:
        seekval = ''
    fkfield = nform.fkfield
    favorites = nform.Meta.model.objects.filter(user=user).values(fkfield)
    fkmodel = nform.fkmodel
    if nform.fkfield == 'favoriteuser':
        latest_models = fkmodel.objects.filter(user__in=favorites) 
    else:
        latest_models = fkmodel.objects.filter(pk__in=favorites)
    latest_index = {}
    for object in latest_models:
        latest_index[object.name] = {'name':object.name, 'id':object.id}
    if seekval:
        select_list = fkmodel.objects.seek(seekval)
    else:
        select_list = fkmodel.objects.none() 
    form = nform(user=user,prefix='favorite')
    form.fields[fkfield].queryset = select_list 
    vocab = collectvocab()
    context = {'latest_index': latest_index
        , 'form': form
        , 'seekval': seekval
        , 'user':user
        , 'userinfo':userinfo
        , 'title':''.join([vocab['Favorite'],' ',vocab[nform.lform.mname]])
    }
    template = 'entities/favoriteindexview.html'
    return render(request, template, context)

def TraitIndexView(request, nform):
    user = request.user
    userinfo = getuserinfo(user)
    if nform.isadmin == True and userinfo['isadmin'] == False:
        return HttpResponseRedirect('/portal/')
    form = nform
    displayname = Vocabulary.objects.activeonly().filter(name=form.Meta.model.__name__)[0].displayplural
    model = form.Meta.model
    latest_index = userviewindex(model,user)
    typelist = []
    for object in latest_index:
        if object.type.name not in typelist:
            typelist.append(object.type.name)
    titles = {}
    for type in typelist:
        tilelist = []
        i=1
        for object in latest_index:
            if object.type.name == type:
                if i > 5:
                    i=1
                tilelist.append({'name':str(object.name.replace("'","")), 'id':str(object.id), 'double':object.name.find(' '), 'link':''.join([form.surl,str(object.id),'/']), 'left':i*20})
                i = i+1
        titles[type] = tilelist
    tiles = {displayname:{'isadmin':False,'isst':False,'titles':titles}}
    context = {'latest_index': latest_index
        , 'form': form
        , 'user':user
        , 'userinfo':userinfo
        , 'tiles':tiles
    }
    template = 'entities/flexindexview.html'
    return render(request, template, context)

@login_required
def NoteCreateView(request):
    user = request.user
    if request.method == 'POST':
        form = NoteForm(request.POST)
        tform = NoteTagForm()
        if form.is_valid():
            model_instance = form.save(commit=False)
            model_instance.author=user
            model_instance.save()
            words=model_instance.body.split()
            for word in words:
                if word[0]=='#':
                    model_instance2 = tform.save(commit=False)
                    model_instance2.note = model_instance
                    model_instance2.tag = word.replace('#', '')
                    model_instance2.save()
            action = ''.join(['/notes/',str(model_instance.id),'/'])
            return HttpResponseRedirect(action)
    else:
        form = NoteForm
    context = {'form': form
        , 'user': user
    }
    template = 'entities/flexcreateview.html'
    return render(request, template, context)

@login_required
def NoteIndexView(request,ntagname):
    user = request.user
    userinfo = getuserinfo(user)
    test = getnotes(user)
    tag = ntagname
    form = NoteForm
    model = userfilter(Note, user)
    if ntagname != 'all':
        notetag_list = NoteTag.objects.filter(tag=tag)
    else:
        notetag_list = NoteTag.objects.all()
    notes = model.filter(id__in=notetag_list.values('note'))
    latest_index = {}
    for note in notes:
        words = note.body.split()
        body = ''
        for word in words:
            if word[0] == '#':
                tag = word.replace('#','')
                word = ''.join([u'<a href="/notes/index/',tag,u'/">',word,u'</a>'])
            body = ''.join([body,' ',word])
        latest_index[note.id] = {'subject':note.subject, 'body':body}
    context = {'notes':notes
        , 'latest_index': latest_index
        , 'form': form
        , 'user':user
        , 'userinfo':userinfo
        , 'test':test
    }
    template = 'entities/noteindexview.html'
    return render(request, template, context)

@login_required
def NoteDetailView(request, pkid):
    user = request.user
    model = Note.objects.get(pk=pkid)
    author = User.objects.get(pk=model.author.pk)
    body = ''
    words = model.body.split()
    for word in words:
        if word[0] == '#':
            tag = word.replace('#','')
            word = ''.join([u'<a href="/notes/index/',tag,u'/">',word,u'</a>'])
        body = ''.join([body,' ',word])
    note = {'subject':model.subject, 'body':body, 'author':author.username}
    notetag_list = NoteTag.objects.filter(note=pkid)
    owner_list = {}
    context = {'note':note
        , 'pkid':pkid
        , 'notetag_list':notetag_list
        , 'owner_list':owner_list
        , 'user':user
    }
    template = 'entities/notedetailview.html'
    return render(request, template, context)

@login_required
def VocabularyIndexView(request):
    user = request.user
    userinfo = getuserinfo(user)
    if VocabularyForm.isadmin == True and userinfo['isadmin'] == False:
        return HttpResponseRedirect('/portal/')
    vocabulary_list = []
    for object in Vocabulary.objects.all():
        vocabulary_list.append(object.name)
    if request.method == 'POST':
        for name in vocabulary_list:
            model = Vocabulary.objects.get(name=name)
	    form = VocabularyForm(user=user,data=request.POST,instance=model,prefix=name)
            if form.is_valid():
                model_instance = form.save()
                model_instance.save()
        red = ''.join(['/vocabulary/index/', ''])
        return HttpResponseRedirect(red)
    form_list = {}
    for name in vocabulary_list:
        model = Vocabulary.objects.get(name=name) 
        form = VocabularyForm(instance=model, prefix=name)
        form_list[name] = form
    template = 'entities/vocabularyindex.html'
    context = {'vocabulary_list':vocabulary_list
        , 'form_list':form_list
        , 'user':user
        , 'userinfo':userinfo
        }
    return render(request, template, context)

@login_required
def CharacterCreateView(request):
    user = request.user
    userinfo = getuserinfo(user)
    if request.method == 'POST':
        form1 = CharacterForm(user=user, data=request.POST)
        form2 = CharacterOwnerForm(user=user)
        if form1.is_valid():
            model_instance1 = form1.save(commit=False)
            if Character.objects.primaryexists(user,model_instance1):
                model_instance1.isprimary=False
            else:
                model_instance1.isprimary=True
            model_instance1.isnew=True
            model_instance1.save()
            clearcharacter(model_instance1.id,reset=True)
            model_instance2 = form2.save(commit=False)
            model_instance2.character = model_instance1
            model_instance2.user = user
            model_instance2.iscontroller=True
            model_instance2.save()
            return HttpResponseRedirect('/portal/')
    else:
        form1 = CharacterForm(user=user)
    test = form1.Meta.exclude
    buttons = []#[{'name':'creator','class':'button','id':'creator','value':'Creator','onclick':'parent.location=\'/characters/creator/\';'}]
    context = {'form':form1
        , 'buttons':buttons
        , 'user':user
        , 'userinfo':userinfo
        , 'char':True
    }
    context.update(csrf(request))
    template = 'entities/flexcreateview.html'
    return render_to_response(template, context)

@login_required
def CharacterDetailView(request, nform, pkid):
    user = request.user
    model1 = Character.objects.get(pk=pkid)
    if request.method == 'POST':
        form1 = CharacterForm(request.POST, instance=model1)
        form2 = CharacterOwnerForm(request.POST)
        s = [form1.surl, str(pkid)]
        red = ''.join(s)
        if form1.is_valid():
            model_instance1 = form1.save()
            model_instance1.save()
        if form2.is_valid():
            model_instance2 = form2.save(commit=False)
            model_instance2.character = model_instance1
            model_instance2.save()
            return HttpResponseRedirect('../index/')
        else:
            return HttpResponseRedirect(red)
    else:
        form1 = CharacterForm(instance=model1)
        form2 = CharacterOwnerForm(initial={'character':pkid})
    owner_list = CharacterOwner.objects.filter(character=model1)
    buttons = [
        {'name':'xpspend','class':'button','id':'xpspend','value':'Spend XP','onclick':''.join(['parent.location=\'',form1.surl,str(pkid),'/spendxp/\';'])},
        {'name':'gridsheet','class':'button','id':'gridsheet','value':'Grid Sheet','onclick':''.join(['parent.location=\'',form1.surl,str(pkid),'/grid/\';'])},
        {'name':'print','class':'button','id':'print','value':'Print','onclick':''.join(['parent.location=\'',form1.surl,str(pkid),'/print/\';'])}]
    if profile.isadmin == True:
        buttons.append({'name':'xpspend','class':'button','id':'xpspend','value':'Spend XP','onclick':''.join(['parent.location=\'',form1.surl,str(pkid),'/spendxp/\';'])})
    if not CharacterTrait.objects.activeonly().filter(character=character):
        buttons.append({'name':'creator','class':'','id':'creator','value':'Creator','onclick':'parent.location=\'/characters/creator/\';'})
    context = {'form1':form1
        , 'form2':form2
        , 'owner_list':owner_list
        , 'buttons':buttons
        , 'pkid':pkid
        , 'user':user
    }
    template = 'entities/characterdetailview.html'
    return render(request, template, context)

@login_required
def CharacterIndexView(request):
    user = request.user
    form = CharacterForm
    owner_list = CharacterOwner.objects.filter(user=user)
    latest_index = Character.objects.filter(id__in=owner_list.values('character'))
    context = {'latest_index': latest_index
        , 'form': form
        , 'user':user
    }
    template = 'entities/flexindexview.html'
    return render(request, template, context)

@login_required
def CharacterUpgradeView(request,pkid):
    user = request.user
    userinfo = getuserinfo(user)
    character = Character.objects.get(pk=pkid)
    charinfo = getcharinfo(character)
    if request.method == 'POST':
        form = CharacterForm(user=user,data=request.POST)
        action = ''.join([form.surl,pkid,'/upgrade/?success=False'])
        if 'upgrade' in request.POST:
            upgraded = upgradecharacter(user,pkid)
            if upgraded == True:
                action = ''.join([form.surl,pkid])
        return HttpResponseRedirect(action)
    form = CharacterForm(user=user,instance=character)
    success = ''
    if 'success' in request.GET:
        success = request.GET['success']
    vocab = collectvocab()
    template = 'entities/characterupgradeview.html'
    context = {'form':form
        ,'success':success
        ,'user':user
        ,'userinfo':userinfo
        ,'charinfo':charinfo
        ,'pkid':pkid
        ,'vocab':vocab
        ,'title':'Upgrade'
    } 
    return render(request, template, context)

@login_required
def CharacterTraitSubmitView(request, pkid):
    user = request.user
    userinfo = getuserinfo(request.user)
    character = Character.objects.get(pk=pkid)
    if character.isnew == False:
        action = ''.join(['/characters/',str(pkid),'/spendxp/'])
        template = 'entities/charactertraitsubmitview.html'
    else:
        action = ''.join(['/characters/',str(pkid),'/spendxp/'])
        template = 'entities/charactercreator.html' 
    if request.method == 'POST':
        for key, value in request.POST.iteritems():
            if "del_trait" in key and value=='on':
                model_id = int(key.replace('del_trait_',''))
                removemodel(CharacterTrait,model_id)
        form = CharacterTraitForm(user=user,data=request.POST)
        if form.is_valid():
            traitid = int(request.POST.get('trait'))
            newtrait = Trait.objects.get(pk=traitid)
            model_instance = form.save(commit=False)
            model_instance.trait = newtrait
            model_instance.character = character
            model_instance.authorizedby = None
            model_instance.save()
            return HttpResponseRedirect(action)
    form = CharacterTraitForm(user=user,initial={'character':character})
    clantype = TraitType.objects.activeonly().get(name='Clan')
    charactertype = character.type.id
    chaptertype = character.type.id
    clans = Trait.objects.activeonly().filter(type=clantype)
    clan = CharacterTrait.objects.activeonly().filter(character=character).filter(trait__in=clans)
    atraittypes = TraitType.objects.activeonly().filter(Q(chaptertypes=None)|Q(chaptertypes__id=chaptertype)).filter(Q(charactertypes=None)|Q(charactertypes__id=charactertype))
    atraits = Trait.objects.activeonly().filter(Q(chaptertypes=None)|Q(chaptertypes__id=chaptertype)).filter(Q(charactertypes=None)|Q(charactertypes__id=charactertype)).filter(Q(cotraits=None)|Q(cotraits__id=clan))
    trait_typelist = atraittypes
    trait_dict = {}
    for type in trait_typelist:
        trait_list = atraits.filter(type=type)
        traittypes = {}
        for trait in trait_list:
            traitdetails = {}
            for field in TraitForm.fieldlist:
                traitdetails[field] = getattr(trait,field)
            traittypes[trait.name] = traitdetails
        trait_dict[type.name] = traittypes
    charactertraits = CharacterTrait.objects.activeonly().filter(character=character).filter(authorizedby=None)
    pendingtrait_list = {}
    for charactertrait in charactertraits:
        objectid = charactertrait.id
        trait = Trait.objects.get(pk=charactertrait.trait.id)
        traittypeid = trait.type.id
        traittype = TraitType.objects.get(pk=traittypeid).name
        pendingtrait_list[trait.name] = {'name':trait.name,'type':traittype,'id':trait.id,'objectid':objectid}
    context = {'trait_dict':trait_dict
        , 'pendingtrait_list':pendingtrait_list
        , 'charactertraits':charactertraits
        , 'action':action
        , 'form':form
        , 'character':character
        , 'errors':''
        , 'user':user
        , 'userinfo':userinfo
        , 'title':'Character Creation'
    }
    return render(request, template, context)
    
@login_required
def CharacterSheetApprovalView(request):
    user = request.user
    userinfo = getuserinfo(user)
    action = '/chapters/sheets/'
    staff = Staff.objects.approver().filter(user=user)
    staffchapters = staff.values('chapter')
    chapters = Chapter.objects.activeonly().filter(pk__in=staffchapters)
    allcharacters = Character.objects.activeonly().filter(chapter__in=chapters)
    pendingtraits = CharacterTrait.objects.activeonly().filter(authorizedby=None).filter(character__in=allcharacters)
    characters = Character.objects.activeonly().filter(pk__in=pendingtraits.values('character'))
    if request.method == 'POST':
        for trait in pendingtraits:
            traitid = ''.join(['app_trait_',str(trait.id)])
            approve = request.POST.get(traitid)
            if approve == '1':
               form = CharacterTraitForm(instance=trait)
               model_instance = form.save(commit=False)
               model_instance.authorizedby = user
               model_instance.save()
               test = ''.join([traitid,' saved by ',user.username])
            approve = None
    chapterdef = []
    for object in chapters:
        chapterdef.append({'name':object.name,'id':str(object.id)})
    chapterfieldlist = ['name','id']
    chapterlist = json(chapterdef,chapterfieldlist)
    characterdef = []
    for object in characters:
        characterdef.append({'name':object.name
            , 'chapter':object.chapter.name
            , 'id':str(object.id)
        })
    characterfieldlist = ['name','chapter','id']
    characterlist = json(characterdef,characterfieldlist)
    pendingtraitdef = []
    for object in pendingtraits:
        pendingtraitdef.append({'character':object.character.name
            , 'chapter':object.character.chapter.name
            , 'trait':object.trait.name
            , 'traittype':object.trait.type.name
            , 'id':str(object.id)
        })
    pendingtraitfieldlist = ['character','chapter','trait','traittype','id']
    pendingtraitlist = json(pendingtraitdef,pendingtraitfieldlist)
    template = 'entities/charactersheetapprovalview.html'
    context = {'chapterlist':chapterlist
        , 'characterlist':characterlist
        , 'pendingtraitfieldlist':pendingtraitfieldlist
        , 'pendingtraitlist':pendingtraitlist
        , 'user':user
        , 'userinfo':userinfo
    }
    return render(request, template, context)

@login_required
def CharacterSheetView01(request, pkid):
    user = request.user
    form = CharacterSheetForm
    cform = CharacterForm
    tform = TraitForm
    ttform = TraitTypeForm    
    character_info = cform.Meta.model.objects.filter(id=pkid).order_by('-datecreated')
    character_traits = form.Meta.model.objects.filter(character=pkid).order_by('-datecreated')
    trait_types_list = ttform.Meta.model.objects.all().order_by('-datecreated')
    traits_list = tform.Meta.model.objects.all().order_by('type')
    clan_list = traits_list.filter(type__in=ttform.Meta.model.objects.filter(name='Clan'))
    context = {'character_info': character_info
        , 'character_traits': character_traits
        , 'pkid': pkid
        , 'traits_list':traits_list
        , 'trait_types_list':trait_types_list
        , 'clan_list':clan_list 
        , 'user':user
        }
    template = 'entities/charactersheet01.html' 
    return render(request, template, context)

@login_required
def CharacterSheetView02(request, pkid):
    user = request.user
    if request.method == 'POST':
        iform1 = CharacterTraitForm(request.POST)
        if iform1.is_valid():
            model_instance = iform1.save()
            model_instance.save()
            return HttpResponseRedirect('../sheet')
    else:
        iform1 = CharacterTraitForm(initial={'character':pkid})
    model = Character.objects.get(pk=pkid)
    form = CharacterForm(instance=model)
    context = {'form':form, 'iform1':iform1, 'pkid':pkid, 'user':user}
    template = 'entities/charactersheet02.html'
    return render(request, template, context)

@login_required
def CharacterSheetView03(request, pkid):
    user = request.user
    clan_type = TraitType.objects.filter(name='Clan')
    temper_type = TraitType.objects.filter(name='Temper')
    attribute_type = TraitType.objects.filter(name='Attribute')
    skill_type = TraitType.objects.filter(name='Skill')
    merit_type = TraitType.objects.filter(name='Merit')
    flaw_type = TraitType.objects.filter(name='Flaw')
    discipline_type = TraitType.objects.filter(name='Discipline')
    if request.method == 'POST':
        iform01 = CharacterTraitForm(request.POST,prefix='clan')
        iform02 = CharacterTraitForm(request.POST,prefix='temper')
        iform03 = CharacterTraitForm(request.POST,prefix='attribute')
        iform04 = CharacterTraitForm(request.POST,prefix='skill')
        iform05 = CharacterTraitForm(request.POST,prefix='merit')
        iform06 = CharacterTraitForm(request.POST,prefix='flaw')
        iform07 = CharacterTraitForm(request.POST,prefix='discipline')
        if iform01.is_valid():
            model_instance01 = iform01.save()
            model_instance01.save()
        if iform02.is_valid():
            model_instance02 = iform02.save()
            model_instance02.save()
        if iform03.is_valid():
            model_instance03 = iform03.save()
            model_instance03.save()
        if iform04.is_valid():
            model_instance04 = iform04.save()
            model_instance04.save()
        if iform05.is_valid():
            model_instance05 = iform05.save()
            model_instance05.save()
        if iform06.is_valid():
            model_instance06 = iform06.save()
            model_instance06.save()
        if iform07.is_valid():
            model_instance07 = iform07.save()
            model_instance07.save()
        return HttpResponseRedirect('/characters/'+str(pkid)+'/sheet/')
    else:
        clan_list = Trait.objects.filter(type__in=clan_type)
        temper_list = Trait.objects.filter(type__in=temper_type)
        attribute_list = Trait.objects.filter(type__in=attribute_type)
        skill_list = Trait.objects.filter(type__in=skill_type)
        merit_list = Trait.objects.filter(type__in=merit_type)
        flaw_list = Trait.objects.filter(type__in=flaw_type)
        discipline_list = Trait.objects.filter(type__in=discipline_type)
        iform01 = CharacterTraitForm(initial={'character':pkid},prefix='clan')
        iform02 = CharacterTraitForm(initial={'character':pkid},prefix='temper')
        iform03 = CharacterTraitForm(initial={'character':pkid},prefix='attribute')
        iform04 = CharacterTraitForm(initial={'character':pkid},prefix='skill')
        iform05 = CharacterTraitForm(initial={'character':pkid},prefix='merit')
        iform06 = CharacterTraitForm(initial={'character':pkid},prefix='flaw')
        iform07 = CharacterTraitForm(initial={'character':pkid},prefix='discipline')
        iform01.fields['trait'].queryset = clan_list 
        iform02.fields['trait'].queryset = temper_list 
        iform03.fields['trait'].queryset = attribute_list 
        iform04.fields['trait'].queryset = skill_list 
        iform05.fields['trait'].queryset = merit_list 
        iform06.fields['trait'].queryset = flaw_list 
        iform07.fields['trait'].queryset = discipline_list 
    trait_type_list = TraitType.objects.all()
    trait_list = Trait.objects.all()
    char_clan_list = CharacterTrait.objects.filter(character=pkid, trait__in=clan_list)
    char_temper_list = CharacterTrait.objects.filter(character=pkid, trait__in=temper_list)
    char_attribute_list = CharacterTrait.objects.filter(character=pkid, trait__in=attribute_list)
    char_skill_list = CharacterTrait.objects.filter(character=pkid, trait__in=skill_list)
    char_merit_list = CharacterTrait.objects.filter(character=pkid, trait__in=merit_list)
    char_flaw_list = CharacterTrait.objects.filter(character=pkid, trait__in=flaw_list)
    char_discipline_list = CharacterTrait.objects.filter(character=pkid, trait__in=discipline_list)
    model = Character.objects.get(pk=pkid)
    form = CharacterForm(instance=model)
    template = 'entities/charactersheet03.html'
    context = {'form':form
        , 'iform01':iform01
        , 'iform02':iform02
        , 'iform03':iform03
        , 'iform04':iform04
        , 'iform05':iform05
        , 'iform06':iform06
        , 'iform07':iform07
        , 'pkid':pkid
        , 'char_clan_list':char_clan_list
        , 'char_temper_list':char_temper_list
        , 'char_attribute_list':char_attribute_list
        , 'char_skill_list':char_skill_list
        , 'char_merit_list':char_merit_list
        , 'char_flaw_list':char_flaw_list
        , 'char_disicpline_list':char_discipline_list
        }
    return render(request, template, context)

@login_required
def CharacterSheetView04(request, pkid):
    user = request.user
    clan_type = TraitType.objects.filter(name='Clan')
    temper_type = TraitType.objects.filter(name='Temper')
    attribute_type = TraitType.objects.filter(name='Attribute')
    skill_type = TraitType.objects.filter(name='Skill')
    merit_type = TraitType.objects.filter(name='Merit')
    flaw_type = TraitType.objects.filter(name='Flaw')
    discipline_type = TraitType.objects.filter(name='Discipline')
    if request.method == 'POST':
        iform01 = CharacterTraitForm(request.POST,prefix='clan')
        iform02 = CharacterTraitForm(request.POST,prefix='temper')
        iform03 = CharacterTraitForm(request.POST,prefix='attribute')
        iform04 = CharacterTraitForm(request.POST,prefix='skill')
        iform05 = CharacterTraitForm(request.POST,prefix='merit')
        iform06 = CharacterTraitForm(request.POST,prefix='flaw')
        iform07 = CharacterTraitForm(request.POST,prefix='discipline')
        if iform01.is_valid():
            model_instance01 = iform01.save()
            model_instance01.save()
        if iform02.is_valid():
            model_instance02 = iform02.save()
            model_instance02.save()
        if iform03.is_valid():
            model_instance03 = iform03.save()
            model_instance03.save()
        if iform04.is_valid():
            model_instance04 = iform04.save()
            model_instance04.save()
        if iform05.is_valid():
            model_instance05 = iform05.save()
            model_instance05.save()
        if iform06.is_valid():
            model_instance06 = iform06.save()
            model_instance06.save()
        if iform07.is_valid():
            model_instance07 = iform07.save()
            model_instance07.save()
        return HttpResponseRedirect('/characters/'+str(pkid)+'/sheet/')
    else:
        clan_list = Trait.objects.filter(type__in=clan_type)
        temper_list = Trait.objects.filter(type__in=temper_type)
        attribute_list = Trait.objects.filter(type__in=attribute_type)
        skill_list = Trait.objects.filter(type__in=skill_type)
        merit_list = Trait.objects.filter(type__in=merit_type)
        flaw_list = Trait.objects.filter(type__in=flaw_type)
        discipline_list = Trait.objects.filter(type__in=discipline_type)
        iform01 = CharacterTraitForm(initial={'character':pkid},prefix='clan')
        iform02 = CharacterTraitForm(initial={'character':pkid},prefix='temper')
        iform03 = CharacterTraitForm(initial={'character':pkid},prefix='attribute')
        iform04 = CharacterTraitForm(initial={'character':pkid},prefix='skill')
        iform05 = CharacterTraitForm(initial={'character':pkid},prefix='merit')
        iform06 = CharacterTraitForm(initial={'character':pkid},prefix='flaw')
        iform07 = CharacterTraitForm(initial={'character':pkid},prefix='discipline')
        iform01.fields['trait'].queryset = clan_list 
        iform02.fields['trait'].queryset = temper_list 
        iform03.fields['trait'].queryset = attribute_list 
        iform04.fields['trait'].queryset = skill_list 
        iform05.fields['trait'].queryset = merit_list 
        iform06.fields['trait'].queryset = flaw_list 
        iform07.fields['trait'].queryset = discipline_list 
    trait_type_list = TraitType.objects.all()
    trait_list = Trait.objects.all()
    char_clan_list = CharacterTrait.objects.filter(character=pkid, trait__in=clan_list)
    char_temper_list = CharacterTrait.objects.filter(character=pkid, trait__in=temper_list)
    char_attribute_list = CharacterTrait.objects.filter(character=pkid, trait__in=attribute_list)
    char_skill_list = CharacterTrait.objects.filter(character=pkid, trait__in=skill_list)
    char_merit_list = CharacterTrait.objects.filter(character=pkid, trait__in=merit_list)
    char_flaw_list = CharacterTrait.objects.filter(character=pkid, trait__in=flaw_list)
    char_discipline_list = CharacterTrait.objects.filter(character=pkid, trait__in=discipline_list)
    model = Character.objects.get(pk=pkid)
    form = CharacterForm(instance=model)
    template = 'entities/charactersheet03.html'
    context = {'form':form
        , 'iform01':iform01
        , 'iform02':iform02
        , 'iform03':iform03
        , 'iform04':iform04
        , 'iform05':iform05
        , 'iform06':iform06
        , 'iform07':iform07
        , 'pkid':pkid
        , 'char_clan_list':char_clan_list
        , 'char_temper_list':char_temper_list
        , 'char_attribute_list':char_attribute_list
        , 'char_skill_list':char_skill_list
        , 'char_merit_list':char_merit_list
        , 'char_flaw_list':char_flaw_list
        , 'char_disicpline_list':char_discipline_list
        }
    return render(request, template, context)

@login_required
def CharacterSheetView05(request, pkid):
    user = request.user
    trait_type_list = []
    action = ''.join(['/characters/', str(pkid), '/sheet/'])
    for object in TraitType.objects.all():
        trait_type_list.append(object.name)
    if request.method == 'POST':
        for name in trait_type_list:
	    iform = CharacterTraitForm(request.POST,prefix=name)
            if iform.is_valid():
                model_instance = iform.save()
                model_instance.save()
        return HttpResponseRedirect(action)
    form_list = {}
    char_trait_list = {}
    for name in trait_type_list:
        type_list = TraitType.objects.filter(name=name)
        trait_list = Trait.objects.filter(type__in=type_list)
        iform = CharacterTraitForm(initial={'character':pkid}, prefix=name)
        iform.fields['trait'].queryset = trait_list
        form_list[name] = iform
        char_list = CharacterTrait.objects.filter(character=pkid, trait__in=trait_list)
        char_trait_list[name] = char_list
    model = Character.objects.get(pk=pkid)
    form = CharacterForm(instance=model)
    template = 'entities/charactersheet05.html'
    context = {'form':form
        , 'trait_type_list':trait_type_list
        , 'form_list':form_list
        , 'char_trait_list':char_trait_list
        , 'action':action
        , 'pkid':pkid
        }
    return render(request, template, context)

@login_required
def CharacterSheetView06(request, pkid):
    user = request.user
    action = ''.join(['/characters/', str(pkid), '/test/'])
    if request.method == 'POST':
        return HttpResponseRedirect(action)
    trait_type_list = TraitType.objects.activeonly()
    trait_list = Trait.objects.activeonly()
    traits = {}
    for typename in trait_type_list:
        traitobjects = trait_list.filter(type=typename)
        traitlist = {}
        for traitname in traitobjects:
            traitlist[traitname.name] = [traitname,traitobjects.level,traitobjects.xpcost]
        traits[typename] = traitlist
    template = 'entities/charactersheet06.html'
    context = {'traits':traits}
    return render(request, template, context)

@login_required
def CharacterSheetGrid(request, pkid, ndate=None, ntime=None, nuser=None):
    user = request.user
    if nuser == None:
        puser = user
    else:
        puser = nuser
    effectivedate = getdate(ndate,ntime) 
    character = Character.objects.activeonly(effectivedate).get(pk=pkid)
    characterowners = CharacterOwner.objects.activeonly().filter(character=character).filter(user=user)
    if not characterowners:
        return HttpResponseRedirect('/portal/')
    onepertraittypes = TraitType.objects.activeonly(effectivedate).filter(onepercharacter=True)
    onepertraits = Trait.objects.activeonly(effectivedate).filter(type__in=onepertraittypes)
    oneperchartraits = CharacterTrait.objects.activeonly(effectivedate).filter(character=character).filter(trait__in=onepertraits)
    characterdict = {'name':character.name,'owner':puser.username}
    characterfieldlist = ['name','owner']
    for object in oneperchartraits:
        characterdict[object.trait.type.name]=str(object.trait.name)
        characterfieldlist.append(object.trait.type.name)
    characterinfo = json([characterdict],characterfieldlist)
    alltraittypes = TraitType.objects.activeonly(effectivedate).filter(onepercharacter=False)
    alltraits = Trait.objects.activeonly(effectivedate).filter(type__in=alltraittypes)
    allactivetraits = CharacterTrait.objects.activeonly(effectivedate).filter(character=character).filter(trait__in=alltraits)
    traitdict = {}
    traitlist = []
    for object in allactivetraits:
        if object.trait.name not in traitdict:
            count=0
            for item in allactivetraits:
                if item.trait.name == object.trait.name:
                    count = count+1
            traitname = object.trait.name
            traitdict[traitname] = {'name':object.trait.name,'type':object.trait.type.name, 'count':str(count),'aggregate':str(object.trait.type.aggregate),'onepercharacter':str(object.trait.type.onepercharacter)}
            traitlist.append(traitdict[traitname])
    traits = json(traitlist,['name','type','count','aggregate','onepercharacter'])
    traittypelist = []
    for object in alltraittypes:
        traittypelist.append({'name':object.name,'id':str(object.id),'aggregate':str(object.aggregate),'onepercharacter':str(object.onepercharacter)})
    traittypes = json(traittypelist,['name','id','aggregate','onepercharacter'])
    action = ''.join(['/character/',str(pkid),'/print/'])
    grid = gridformat(characterdict,traitlist,traittypelist)
    template = 'entities/gridcharactersheet.html'
    context = {'character':character 
        , 'characterinfo':characterinfo
        , 'action':action
        , 'traits':traits
        , 'traittypes':traittypes
        , 'character':character
        , 'pkid':pkid
        , 'puser':puser
        , 'effectivedate':effectivedate
        , 'grid':grid
        }
    return render(request, template, context)

def CharacterCreatorView(request, pkid):
    user = request.user
    userinfo = getuserinfo(user)
    character = Character.objects.get(pk=pkid)
    charinfo = getcharinfo(pkid,datetime.now())
    if character.isnew == False:
        action = ''.join(['/characters/',str(pkid),'/creator/'])
        #template = 'entities/charactertraitsubmitview.html'
        template = 'entities/charactercreator.html' 
    else:
        action = ''.join(['/characters/',str(pkid),'/creator/'])
        template = 'entities/charactercreator.html' 
    if request.method == 'POST':
        for key, value in request.POST.iteritems():
            if "del_trait" in key and value=='on':
                model_id = int(key.replace('del_trait_',''))
                removemodel(CharacterTrait,model_id)
        form = CharacterTraitForm(request.POST)
        if form.is_vialid():
            traitid = int(request.POST.get('trait'))
            newtrait = Trait.objects.get(pk=traitid)
            model_instance = form.save(commit=False)
            model_instance.trait = newtrait
            model_instance.character = character
            model_instance.authorizedby = None
            model_instance.save()
            return HttpResponseRedirect(action)
    form = CharacterTraitForm(initial={'character':character})
    clantype = TraitType.objects.activeonly().get(name='Clan')
    charactertype = character.type.id
    chaptertype = character.type.id
    clans = Trait.objects.activeonly().filter(type=clantype)
    clan = CharacterTrait.objects.activeonly().filter(character=character).filter(trait__in=clans)
    atraittypes = TraitType.objects.activeonly().filter(Q(chaptertypes=None)|Q(chaptertypes__id=chaptertype)).filter(Q(charactertypes=None)|Q(charactertypes__id=charactertype))
    atraits = Trait.objects.activeonly().filter(Q(chaptertypes=None)|Q(chaptertypes__id=chaptertype)).filter(Q(charactertypes=None)|Q(charactertypes__id=charactertype)).filter(Q(cotraits=None)|Q(cotraits__id=clan))
    trait_typelist = atraittypes
    trait_dict = {}
    for type in trait_typelist:
        trait_list = atraits.filter(type=type)
        traittypes = {}
        for trait in trait_list:
            traitdetails = {}
            for field in TraitForm.fieldlist:
                traitdetails[field] = getattr(trait,field)
            traittypes[trait.name] = traitdetails
        trait_dict[type.name] = traittypes
    charactertraits = CharacterTrait.objects.activeonly().filter(character=character).filter(authorizedby=None)
    pendingtrait_list = {}
    for charactertrait in charactertraits:
        objectid = charactertrait.id
        trait = Trait.objects.get(pk=charactertrait.trait.id)
        traittypeid = trait.type.id
        traittype = TraitType.objects.get(pk=traittypeid).name
        pendingtrait_list[trait.name] = {'name':trait.name,'type':traittype,'id':trait.id,'objectid':objectid}
    context = {'trait_dict':trait_dict
        , 'pendingtrait_list':pendingtrait_list
        , 'charactertraits':charactertraits
        , 'action':action
        , 'form':form
        , 'character':character
        , 'errors':''
        , 'user':user
        , 'userinfo':userinfo
        , 'charinfo':charinfo
        , 'title':'Character Creation'
    }
    return render(request, template, context)

def PaypalPaymentTest(request):
    return render(request, template, context)

def PaypalPaymentNotify(request):
    notes = ''
    subscription = SubscriptionForm().save(commit=False)
    user = User.objects.get(pk=1)
    txn = Transaction.objects.get(pk=1)
    subscription.user = user
    subscription.txn = txn
    subscription.save()
    return HttpResponse('Hello, Paypal!')

def Static(request):
    return HttpResponse('Hello, World!')








